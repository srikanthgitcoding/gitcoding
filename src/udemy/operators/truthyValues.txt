FALSY Values
--------------
console.log(Boolean(false))
console.log(Boolean(0))
console.log(Boolean(""))
console.log(Boolean(null))
console.log(Boolean(undefined))
console.log(Boolean(NaN))

TRUTHY Values
---------------
console.log(Boolean('false')) // An empty object
console.log(Boolean(' ')) // An empty object
console.log(Boolean('0')) // An empty object
console.log(Boolean([])) // An empty array
console.log(Boolean({})) // An empty object

**  Boolean function used to explicitly convert 'value' to a boolean value. **
The given code snippet demonstrates the behavior of the Boolean function in JavaScript when applied to different types of values. Here is a breakdown of each line along with a clear explanation:

console.log(Boolean('false'))

The Boolean function is applied to the string value 'false'.
The result is true because any non-empty string (including the string 'false') is considered truthy in JavaScript.
console.log(Boolean(' '))

The Boolean function is applied to the string value ' ', which contains a single space.
The result is true because a string with any non-whitespace character is considered truthy.
console.log(Boolean('0'))

The Boolean function is applied to the string value '0'.
The result is true because a non-empty string, even if it represents the character '0', is considered truthy.
console.log(Boolean([]))

The Boolean function is applied to an empty array [].
The result is true because an empty array is considered truthy in JavaScript.
console.log(Boolean({}))

The Boolean function is applied to an empty object {}.
The result is true because an empty object is considered truthy in JavaScript.
----------------
** strict equality - (===)
** loose equality - (==)
if (1 == [1]) {
  console.log('EQUAL') //gets executed
} else {
  console.log('NOT EQUAL') 
}

if (1 === [1]) {
  console.log('EQUAL')
} else {
  console.log('NOT EQUAL')  //gets executed
}
--------
